{"version":3,"sources":["logo.svg","components/CharacterCard/index.js","components/Container/index.js","components/Hero/index.js","components/InfoHeader/index.js","components/Footer/index.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","CharacterCard","_ref","id","name","image","description","handleUserPick","react_default","a","createElement","className","key","data-id","onClick","style","width","src","alt","Container","props","children","Hero","InfoHeader","Footer","App","state","characters","userPicks","hiScore","message","content","event","_this2","this","components_InfoHeader","components_Hero","components_Container","map","card","components_CharacterCard","components_Footer","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"y5GAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,iQCyBzBC,qBAtBO,SAAAC,GAAA,IAAGC,EAAHD,EAAGC,GAAIC,EAAPF,EAAOE,KAAMC,EAAbH,EAAaG,MAAOC,EAApBJ,EAAoBI,YAAaC,EAAjCL,EAAiCK,eAAjC,OAClBC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,SACXH,EAAAC,EAAAC,cAAA,OACIC,UAAU,OACVC,IAAKT,EACLU,UAASV,EACTC,KAAMA,EACNU,QAASP,EACTQ,MAAO,CAACC,MAAO,UAEfR,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,eAAeM,IAAKZ,EAAOa,IAAKd,IAC/CI,EAAAC,EAAAC,cAAA,KAAGC,UAAU,yBACbH,EAAAC,EAAAC,cAAA,uBAAeN,EAAf,MACAI,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,cAAMJ,EAAN,iBCNDa,MATf,SAAmBC,GACf,OACIZ,EAAAC,EAAAC,cAAA,OACAC,UAAU,aACLS,EAAMC,iBCMJC,MAVf,SAAcF,GACV,OACIZ,EAAAC,EAAAC,cAAA,OACIC,UAAU,4BACVR,GAAG,QACEiB,EAAMC,iBCgBRE,MArBf,WACI,OACIf,EAAAC,EAAAC,cAAA,OACIC,UAAU,MACVR,GAAG,eACHK,EAAAC,EAAAC,cAAA,OACIC,UAAU,oBAGdH,EAAAC,EAAAC,cAAA,OACIC,UAAU,oBAGdH,EAAAC,EAAAC,cAAA,OACIC,UAAU,4BCNXa,MARf,SAAgBJ,GACZ,OACIZ,EAAAC,EAAAC,cAAA,OAAKP,GAAG,UACHiB,EAAMC,kBCgFJI,6MAvEbC,MAAQ,CACNC,WAAYA,EACZC,UAAW,GACXC,QAAS,EACTC,QAAS,GACTC,QAAS,MAGXxB,eAAiB,SAAAyB,6EASR,IAAAC,EAAAC,KACP,OACE1B,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAACyB,EAAD,MAEA3B,EAAAC,EAAAC,cAAC0B,EAAD,KACE5B,EAAAC,EAAAC,cAAA,MAAIC,UAAU,yBAAd,6BAGAH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,oBAAb,6FAKFH,EAAAC,EAAAC,cAAC2B,EAAD,KACE7B,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACZuB,KAAKR,MAAMC,WAAWW,IAAI,SAACC,GAC1B,OACE/B,EAAAC,EAAAC,cAAC8B,EAAD,CACErC,GAAIoC,EAAKpC,GACTC,KAAMmC,EAAKnC,KACXC,MAAOkC,EAAKlC,MACZC,YAAaiC,EAAKjC,YAClBQ,QAASmB,EAAK1B,qBAqBxBC,EAAAC,EAAAC,cAAC+B,EAAD,cA/DUC,aCDEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOzC,EAAAC,EAAAC,cAACwC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.deff55b8.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\r\nimport './style.css';\r\n\r\nconst CharacterCard = ({ id, name, image, description, handleUserPick }) => (\r\n    <div className='col-3'>\r\n        <div\r\n            className=\"card\"\r\n            key={id}\r\n            data-id={id}\r\n            name={name}\r\n            onClick={handleUserPick}\r\n            style={{width: '18rem'}}\r\n        >\r\n            <div className='card-body'>\r\n                <img className='card-img-top' src={image} alt={name} />\r\n                <p className='card-text text-center'>\r\n                <strong>- The {name} -</strong>\r\n                <hr />\r\n                <em>\"{description}\"</em>\r\n                </p>\r\n            </div>\r\n        </div>\r\n    </div>\r\n)\r\n\r\nexport default CharacterCard;","import React from 'react';\nimport './style.css';\n\nfunction Container(props) {\n    return (\n        <div\n        className=\"container\">\n            {props.children}\n        </div>\n    )\n}\n\nexport default Container;","import React from 'react';\nimport './style.css';\n\nfunction Hero(props) {\n    return (\n        <div\n            className=\"jumbotron jumbotron-fluid\"\n            id=\"hero\">\n                {props.children}\n        </div>\n    )\n}\n\nexport default Hero;","import React from 'react';\nimport './style.css';\n\nfunction InfoHeader() {\n    return (\n        <div \n            className=\"row\"\n            id=\"info-header\">\n            <div\n                className=\"col-4 user-info\">\n                    {/* Title */}\n            </div>\n            <div\n                className=\"col-4 user-info\">\n                    {/* Instructions/Alert */}\n            </div>\n            <div\n                className=\"col-4 user-info\">\n                    {/* Score */}\n            </div>\n        </div>\n    )\n}\n\nexport default InfoHeader;","import React from 'react';\nimport './style.css';\n\nfunction Footer(props) {\n    return (\n        <div id=\"footer\">\n            {props.children}\n        </div>\n    )\n}\n\nexport default Footer;","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport CharacterCard from './components/CharacterCard'\nimport Container from './components/Container'\nimport Hero from './components/Hero'\nimport InfoHeader from './components/InfoHeader'\nimport Footer from './components/Footer'\nimport characters from './characters.json'\n\n\n\n\nclass App extends Component {\n\n  state = {\n    characters: characters,\n    userPicks: [],\n    hiScore: 0,\n    message: \"\",\n    content: []\n  }\n\n  handleUserPick = event => {\n    // Obtain character id and name\n    // Check if picked\n    // (!picked) push to userPicks, increase score by 1\n\n    // Shuffle character cards\n\n  }\n\n  render() {\n    return (\n      <div>\n        <InfoHeader />\n\n        <Hero>\n          <h1 className=\"display-1 text-center\">\n            Final Fantasy Memory Game\n      </h1>\n          <p className=\"lead text-center\">\n            Click on each character card only ONCE! Test your memory and see how high you can score!\n         </p>\n        </Hero>\n\n        <Container>\n          <div className='row'>\n            {this.state.characters.map((card) => {\n              return (\n                <CharacterCard\n                  id={card.id}\n                  name={card.name}\n                  image={card.image}\n                  description={card.description}\n                  onClick={this.handleUserPick}\n                />\n              )\n            })}\n          </div>\n\n          {/* <div className='row'>\n            {this.state.characters.map(card => {\n              return (\n                <CharacterCard\n                  id={card.id}\n                  name={card.name}\n                  image={card.image}\n                  description={card.description}\n                  onClick={this.handleUserPick}\n                />\n              )\n            })}\n          </div> */}\n        </Container>\n\n        <Footer>\n\n        </Footer>\n      </div>\n\n    )\n  }\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}