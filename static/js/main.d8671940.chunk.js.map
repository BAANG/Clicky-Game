{"version":3,"sources":["logo.svg","components/Container/index.js","components/Hero/index.js","components/InfoHeader/index.js","components/Footer/index.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Container","props","react_default","a","createElement","className","children","Hero","id","InfoHeader","Footer","App","state","characters","userPicks","hiScore","message","handleUserPick","event","components_InfoHeader","components_Hero","components_Container","components_Footer","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"yIAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,yRCYzBC,MATf,SAAmBC,GACf,OACIC,EAAAC,EAAAC,cAAA,OACAC,UAAU,aACLJ,EAAMK,iBCMJC,MAVf,SAAcN,GACV,OACIC,EAAAC,EAAAC,cAAA,OACIC,UAAU,4BACVG,GAAG,QACEP,EAAMK,iBCgBRG,MArBf,WACI,OACIP,EAAAC,EAAAC,cAAA,OACIC,UAAU,MACVG,GAAG,eACHN,EAAAC,EAAAC,cAAA,OACIC,UAAU,oBAGdH,EAAAC,EAAAC,cAAA,OACIC,UAAU,oBAGdH,EAAAC,EAAAC,cAAA,OACIC,UAAU,4BCNXK,MARf,SAAgBT,GACZ,OACIC,EAAAC,EAAAC,cAAA,OAAKI,GAAG,UACHP,EAAMK,WCoDJK,6MA5CbC,MAAQ,CACNC,WAAY,GACZC,UAAW,GACXC,QAAS,EACTC,QAAS,MAGXC,eAAiB,SAAAC,6EAUf,OACEhB,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAACe,EAAD,MAEAjB,EAAAC,EAAAC,cAACgB,EAAD,KACElB,EAAAC,EAAAC,cAAA,MAAIC,UAAU,aAAd,eAGAH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,QAAb,4FAKFH,EAAAC,EAAAC,cAACiB,EAAD,MAIAnB,EAAAC,EAAAC,cAACkB,EAAD,cApCUC,aCAEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO5B,EAAAC,EAAAC,cAAC2B,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.d8671940.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\r\nimport './style.css';\r\n\r\nfunction Container(props) {\r\n    return (\r\n        <div\r\n        className=\"container\">\r\n            {props.children}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Container;","import React from 'react';\r\nimport './style.css';\r\n\r\nfunction Hero(props) {\r\n    return (\r\n        <div\r\n            className=\"jumbotron jumbotron-fluid\"\r\n            id=\"hero\">\r\n                {props.children}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Hero;","import React from 'react';\r\nimport './style.css';\r\n\r\nfunction InfoHeader() {\r\n    return (\r\n        <div \r\n            className=\"row\"\r\n            id=\"info-header\">\r\n            <div\r\n                className=\"col-4 user-info\">\r\n                    {/* Title */}\r\n            </div>\r\n            <div\r\n                className=\"col-4 user-info\">\r\n                    {/* Instructions/Alert */}\r\n            </div>\r\n            <div\r\n                className=\"col-4 user-info\">\r\n                    {/* Score */}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default InfoHeader;","import React from 'react';\r\nimport './style.css';\r\n\r\nfunction Footer(props) {\r\n    return (\r\n        <div id=\"footer\">\r\n            {props.children}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Footer;","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport CharacterCard from './components/CharacterCard'\nimport Container from './components/Container'\nimport Hero from './components/Hero'\nimport InfoHeader from './components/InfoHeader'\nimport Footer from './components/Footer'\n\n\n\n\nclass App extends Component {\n\n  state = {\n    characters: [],\n    userPicks: [],\n    hiScore: 0,\n    message: \"\"\n  }\n\n  handleUserPick = event => {\n    // Obtain character id and name\n    // Check if picked\n    // (!picked) push to userPicks, increase score by 1\n\n    // Shuffle character cards\n\n  }\n\n  render() {\n    return (\n      <div>\n        <InfoHeader />\n\n        <Hero>\n          <h1 className=\"display-1\">\n            Clicky Game\n      </h1>\n          <p className=\"lead\">\n            Click on each charater card only ONCE! Test your memory and see how high you can score!\n         </p>\n        </Hero>\n\n        <Container>\n          {/* Populate with each of the character cards */}\n        </Container>\n\n        <Footer>\n\n        </Footer>\n      </div>\n\n    )\n  }\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}